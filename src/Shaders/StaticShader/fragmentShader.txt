#version 400 core

in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Pixel;

uniform vec3 lightColor;

void main(void)
{
    vec3 unitSurfaceNormal = normalize(surfaceNormal);
    vec3 unitToLightVector = normalize(toLightVector);

    float NormalLightDot = dot(unitSurfaceNormal, unitToLightVector);
    float brightness = max(NormalLightDot, 0.2);
    vec3 diffuseColor = brightness * lightColor;

    vec3 unitToCameraVector = normalize(toCameraVector);
    vec3 lightDirection = -unitToLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitSurfaceNormal);

    float specularFactor = dot(reflectedLightDirection, unitToCameraVector);
    specularFactor = max(specularFactor, 0.0);
    vec3 finalSpecular = pow(specularFactor, 4) * 1 * lightColor;

    out_Pixel = vec4(diffuseColor, 1.0) * vec4(0, 0, 1, 1) + vec4(finalSpecular, 1.0);
}
